showMe(cols)
pal <- colo\
pal <- colorRampPalette(cols)
showMe(pal(3)
showMe(pal(20))
showMe(pal(20))
image(volcano,col = pal(20))
p1(20)
image(volcano, col = p1(20))
swirl()
library("swirl")
swirl()
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,aes(col=drv))
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom = c("point","smooth"))
qplot(y=displ,data=mpg,color=drv)
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom = "boxplot")
qplot(drv,hwy,data=mpg,geom = "boxplot",col="manufacturer")
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data=mpg,aes(fill=drv))
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets = .~drv)
qplot(hwy,data=mpg,facets = .~drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
library("swirl")
swirl()
qplot(displ,hwy,data=mpg,geom = c("point","smooth"),facets = .~drv)
g<- ggplot(data=mpg,aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = lm)
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(~.drv)
g+geom_point()+facet_grid(~.drv)
g+geom_point()+facet_grid(~.drv)
g+geom_point()
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle()
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ggtitle(label = "")
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth()
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(color="drv",size=4,alpha=1/2)
g+geom_point(color=drv,size=4,alpha=1/2)
g+geom_point(aes(color="drv"),size=4,alpha=1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv),labs(title(main = "Swirl Rules!",x="Displacement",y="Hwy Mileage")))
g + geom_point(aes(color = drv),labs(title(main = "Swirl Rules!"))
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,lty=3,method = lm,se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g+ggplot(testdat,aes(x=myx,y=myy))
ggplot(testdat,aes(x=myx,y=myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g+geom_line()
g+geom_line()
g + geom_line() + ylim(-3,3)
+ geom_line() +coord_cartesian(ylim = c(-3,3))
g+ geom_line() +coord_cartesian(ylim = c(-3,3))
g<- ggplot(mpg,aes(x=displ,y=hwy),col=factor(year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid((drv~cyl),margins = TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = lm)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage")+ggtitle("swirl rules")
Typeg + geom_point() +
| facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway
| Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl rules!")
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacemen",y="Highway Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library("swirl")
swirl()
str(diamonds)
qplot(data="diamonds")
qplot(data=diamonds)
qplot(data=diamonds)
qplot(price,data="diamonds")
qplot(price,data = diamonds)
range(diamonds$price)
qplot(price,data = diamonds,binwidth=18497/30)
brk
counts
qplot(price,data = diamonds,binwidth=18497/30,fill=cut)
qplot(price,data = diamonds,geom = "density")
qplot(price,data = diamonds,geom = "density",color=cut)
qplot(carat,price,data = diamonds)
qplot(carat,price,data = diamonds,shape=cut)
qplot(carat,price,data = diamonds,colorConverter()=cut)
qplot(carat,price,data = diamonds,color=cut)
qplot(carat,price,data = diamonds,color=cut)+geom_smooth(method = lm)
qplot(carat,price,data = diamonds,color=cut)+geom_smooth(method = "lm")
qplot(carat,price,data = diamonds,color=cut)+geom_smooth(method = "lm")+facet_grid(.~cut)
})
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")\
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
qplot(diamonds,aes(depth,price))
qplot(diamonds,aes=(depth,price))
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds,aes(depth,price))
g
summary(g)
g+ geom_point(alpha=1/3)
cutpoints <- qplot(diamonds$carat,seq(0,1,length=4))
Type cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
Type cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
d
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3,facet_grid(cut~car2))
g <- ggplot(diamonds,aes(depth,price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
(g+geom_point(alpha=1/3)+facet_grid(cut~car2))+geom_smooth(method = "lm")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
library(ggplot2movies)
library("swirl")
library()
library("swirl")
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
abline(h=1.5,col="blue")
abline(h=.4,col="red")
6
5
5
4
3
2
1
6
3
7
1
0
2
3
4
5
6
7
8
9
10
11
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix,cm.colors(25))
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library("swirl")
swirl()
heatmap(dataMatrix,col=cm.colors(25))
unclass(sub1$activity)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist(sub1,dist,x[,10:12])
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd <- scale(sub1[,-c(562,563)])
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(sdv1$v)
maxCon <- which.max(sdv1$v)
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust)
dim(kClust$centers)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="laying cluster")
plot(kClust$centers[laying, 1:12],pch=19,ylab="Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- while (kClust$size==49) {
}
walkdown <- which(kClust$size==49)
kClust$centers[walkdown,1:12],pch=19
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
hirerachical_clust <- function(){
set.seed(1234)
par(mar=c(0,0,0,0))
x<- rnorm(12,mean = rep(1:3,each=4),sd=0.2)
y<- rnorm(12,mean = rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
}
hirerachical_clust()
dist(dataFrame)
dataFrame <- data.frame(x=x,y=y)
set.seed(1234)
par(mar=c(0,0,0,0))
x<- rnorm(12,mean = rep(1:3,each=4),sd=0.2)
y<- rnorm(12,mean = rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame)
hirerachical_clust <- function(){
set.seed(1234)
par(mar=c(0,0,0,0))
x<- rnorm(12,mean = rep(1:3,each=4),sd=0.2)
y<- rnorm(12,mean = rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
}
dataFrame <- data.frame(x=hirerachical_clust()x,y=hirerachical_clust()y)
dataFrame <- data.frame(x=hirerachical_clust()$x,y=hirerachical_clust()$y)
dist(dataFrame)
set.seed(1234)
par(mar=c(0,0,0,0))
x<- rnorm(12,mean = rep(1:3,each=4),sd=0.2)
y<- rnorm(12,mean = rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
dataFrame <- data.frame(x=x,y=y)
dist(dataFrame)
z<- rnorm(12,mean = rep(1:3,each=4),sd=0.2)
z
z<- rnorm(12,mean = rep(1:4,each=4),sd=0.2)
z
z<- rnorm(12,mean = rep(1:4,each=1),sd=0.2)
z
rep(1:4,each=1)
rep(1:4,each=2)
z<- rnorm(12,mean = rep(1:4,each=5),sd=0.2)
z
rep(1:4,each=2)
distxy <-dist(dataFrame)
hclustering <- hclust(distxy)
plot(hclustering)
?lab.col
c <- data.frame(10:5)
c
d.f <- data.frame(rating = c("AAA", "A", "A", "AAA",
"BB", "BB", "AAA", "A"))
d.f
sub.data <- d.f[by==unique(by)[i]]
sub.data <- d.f[by==unique(by)[i],]
subset(mtcars,mtcars$mpg=is.na())
mtcars$mpg <- is.na()
v1 <- 1:5
v2 <- 6:10
cbind(v1,v2)
rbind(v1,v2)
m <- 1:10
m <- c(2,5)
m
dim(m) <- c(2,5)
m
m <- 1:10
dim(m) <- c(2,5)
m
x <- matrix(1:4, 2, 3)
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
colmean <- function(y,removeNA = TRUE)
{
nc <- ncol(y)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
colmean(airquality)
colmean <- function(y,removeNA = TRUE)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(y[,i],na.rm = removeNA)
}
means
}
colmean(airquality)
colmean <- function(y,removeNA = TRUE)
{
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means <- mean(y[,i],na.rm = removeNA)
}
means
}
colmean(airquality)
setwd("C:/Viraj/Bridgeport/FALL-18-Project/Kaggle-competitiom/Predicting-house-prices")
dataset_train <- read.csv("train.csv")
dataset_test <- read.csv("test.csv")
dataset_train$Alley <- NULL
dataset_train$MiscFeature <- NULL
dataset_train$PoolQC <- NULL
dataset_train$FireplaceQu<- NULL
dataset_train$Fence <- NULL
dataset_train$LotFrontage[is.na(dataset_train$LotFrontage)]<- 0
dataset_train$MasVnrType[is.na(dataset_train$MasVnrType)]<- "None"
# Levels setting - BsmtQual
levels <- levels(dataset_train$BsmtQual)
levels[length(levels) + 1] <- "UN"
dataset_train$BsmtQual <- factor(dataset_train$BsmtQual, levels = levels)
# Levels setting - BsmtCond
levels <- levels(dataset_train$BsmtCond)
levels[length(levels) + 1] <- "UN"
dataset_train$BsmtCond <- factor(dataset_train$BsmtCond, levels = levels)
# Levels setting - BsmtExposure
levels <- levels(dataset_train$BsmtExposure)
levels[length(levels) + 1] <- "UN"
dataset_train$BsmtExposure <- factor(dataset_train$BsmtExposure, levels = levels)
# Levels setting - BsmtFinType1
levels <- levels(dataset_train$BsmtFinType1)
levels[length(levels) + 1] <- "UN"
dataset_train$BsmtFinType1 <- factor(dataset_train$BsmtFinType1, levels = levels)
# Levels setting - BsmtFinType1
levels <- levels(dataset_train$BsmtFinType2)
levels[length(levels) + 1] <- "UN"
dataset_train$BsmtFinType2 <- factor(dataset_train$BsmtFinType2, levels = levels)
dataset_train$BsmtQual[is.na(dataset_train$BsmtQual)] <- "UN"
dataset_train$BsmtCond[is.na(dataset_train$BsmtCond)] <- "UN"
dataset_train$BsmtExposure[is.na(dataset_train$BsmtExposure)] <- "UN"
dataset_train$BsmtFinType1[is.na(dataset_train$BsmtFinType1)] <- "UN"
dataset_train$BsmtFinType2[is.na(dataset_train$BsmtFinType2)] <- "UN"
# Levels setting - GarageType
levels <- levels(dataset_train$GarageType)
levels[length(levels) + 1] <- "UN"
dataset_train$GarageType <- factor(dataset_train$GarageType, levels = levels)
# Levels setting - GarageFinish
levels <- levels(dataset_train$GarageFinish)
levels[length(levels) + 1] <- "UN"
dataset_train$GarageFinish <- factor(dataset_train$GarageFinish, levels = levels)
# Levels setting - GarageQuality
levels <- levels(dataset_train$GarageQual)
levels[length(levels) + 1] <- "UN"
dataset_train$GarageQual <- factor(dataset_train$GarageQual, levels = levels)
# Levels setting - Garagecondition
levels <- levels(dataset_train$GarageCond)
levels[length(levels) + 1] <- "UN"
dataset_train$GarageCond <- factor(dataset_train$GarageCond, levels = levels)
dataset_train$GarageType[is.na(dataset_train$GarageType)] <- "UN"
dataset_train$GarageYrBlt[is.na(dataset_train$GarageYrBlt)] <- 0000
dataset_train$GarageFinish[is.na(dataset_train$GarageFinish)] <- "UN"
dataset_train$GarageQual[is.na(dataset_train$GarageQual)] <- "UN"
dataset_train$GarageCond[is.na(dataset_train$GarageCond)] <- "UN"
colSums(is.na(dataset_test))
colSums(is.na(dataset_train))
dataset_test$Alley <- NULL
dataset_test$MiscFeature <- NULL
dataset_test$PoolQC <- NULL
dataset_test$FireplaceQu<- NULL
dataset_test$Fence <- NULL
dataset_test$LotFrontage[is.na(dataset_test$LotFrontage)]<- 0
dataset_test$MasVnrType[is.na(dataset_test$MasVnrType)]<- "None"
dataset_test$MasVnrArea[is.na(dataset_test$MasVnrArea)]<- 0
# Levels setting - BsmtQual
levels <- levels(dataset_test$BsmtQual)
levels[length(levels) + 1] <- "UN"
dataset_test$BsmtQual <- factor(dataset_test$BsmtQual, levels = levels)
# Levels setting - BsmtCond
levels <- levels(dataset_test$BsmtCond)
levels[length(levels) + 1] <- "UN"
dataset_test$BsmtCond <- factor(dataset_test$BsmtCond, levels = levels)
# Levels setting - BsmtExposure
levels <- levels(dataset_test$BsmtExposure)
levels[length(levels) + 1] <- "UN"
dataset_test$BsmtExposure <- factor(dataset_test$BsmtExposure, levels = levels)
# Levels setting - BsmtFinType1
levels <- levels(dataset_test$BsmtFinType1)
levels[length(levels) + 1] <- "UN"
dataset_test$BsmtFinType1 <- factor(dataset_test$BsmtFinType1, levels = levels)
# Levels setting - BsmtFinType1
levels <- levels(dataset_test$BsmtFinType2)
levels[length(levels) + 1] <- "UN"
dataset_test$BsmtFinType2 <- factor(dataset_test$BsmtFinType2, levels = levels)
dataset_test$BsmtQual[is.na(dataset_test$BsmtQual)] <- "UN"
dataset_test$BsmtCond[is.na(dataset_test$BsmtCond)] <- "UN"
dataset_test$BsmtExposure[is.na(dataset_test$BsmtExposure)] <- "UN"
dataset_test$BsmtFinType1[is.na(dataset_test$BsmtFinType1)] <- "UN"
dataset_test$BsmtFinType2[is.na(dataset_test$BsmtFinType2)] <- "UN"
# Levels setting - GarageType
levels <- levels(dataset_test$GarageType)
levels[length(levels) + 1] <- "UN"
dataset_test$GarageType <- factor(dataset_test$GarageType, levels = levels)
# Levels setting - GarageFinish
levels <- levels(dataset_test$GarageFinish)
levels[length(levels) + 1] <- "UN"
dataset_test$GarageFinish <- factor(dataset_test$GarageFinish, levels = levels)
# Levels setting - GarageQuality
levels <- levels(dataset_test$GarageQual)
levels[length(levels) + 1] <- "UN"
dataset_test$GarageQual <- factor(dataset_test$GarageQual, levels = levels)
# Levels setting - Garagecondition
levels <- levels(dataset_test$GarageCond)
levels[length(levels) + 1] <- "UN"
dataset_test$GarageCond <- factor(dataset_test$GarageCond, levels = levels)
dataset_test$GarageType[is.na(dataset_test$GarageType)] <- "UN"
dataset_test$GarageYrBlt[is.na(dataset_test$GarageYrBlt)] <- 0000
dataset_test$GarageFinish[is.na(dataset_test$GarageFinish)] <- "UN"
dataset_test$GarageQual[is.na(dataset_test$GarageQual)] <- "UN"
dataset_test$GarageCond[is.na(dataset_test$GarageCond)] <- "UN"
colSums(is.na(dataset_test))
convert.to.dummy <- function(data.set){
cat.var <-NULL
temp.data <- data.frame(1:nrow(data.set))
for(i in 1:ncol(data.set)){
if(class(data.set[,i]) == "factor"){
cat.var <- c(cat.var,i)
factor.levels <- levels(data.set[,i]) # Try to find a way to classify NA's as "NO" otherwise they generate problem downstream
# First check if there is any 'NA-level'
if(any(is.na(data.set[,i]))){
dummy.vector = ifelse(is.na(data.set[,i]),1,0)
dummy.vector <- data.frame(dummy.vector)
colnames(dummy.vector)[1] = paste("NO",names((data.set)[i]),sep = ".")
temp.data <- cbind(temp.data,dummy.vector)
}
for(j in seq_along(factor.levels)){ # Then deal with normal factor levels
dummy.vector = ifelse(data.set[,i] == factor.levels[j],1,0)
#Since we already dealt with NAs above
if(any(is.na(dummy.vector))){dummy.vector[is.na(dummy.vector)] <- 0}
dummy.vector <- data.frame(dummy.vector)
colnames(dummy.vector)[1] = paste(names((data.set)[i]),
factor.levels[j],sep = ".")
temp.data <- cbind(temp.data,dummy.vector)
}
}
}
#Remove the original categorical variables from data.set
data.set <- data.set[,-cat.var]
#Add the dummy.variable set
temp.data <- temp.data[,-1] # remove the unnecessary column
data.set <- cbind(data.set,temp.data)
return(data.set)
}
training.processed <- convert.to.dummy(dataset_train)
# Process the test set
test.processed <- convert.to.dummy(dataset_test)
#############################################################################################
View(training.processed)
library(caTools)
set.seed(123)
split = sample.split(training.processed$SalePrice,SplitRatio = 0.7)
new_training  = subset(training.processed,split==TRUE)
new_Valid = subset(training.processed,split == FALSE)
# Fitting the model- Multiple Linear Regression
regressor <- lm(formula = new_training$SalePrice ~ .,data=new_training)
y_pred <- predict(regressor,newdata = new_Valid)
################## Predict for test data ###############################
fitmodel = data.frame(predict(regressor, test.processed, interval = "prediction"))
################## Predict for test data ###############################
fitmodel = data.frame(predict(regressor, newdata = test.processed))
colSums(is.na(test.processed))
################## Predict for test data ###############################
fitmodel = data.frame(predict(regressor, newdata = test.processed))
View(test.processed)
split = sample.split(dataset_train$SalePrice,SplitRatio = 0.7)
new_training  = subset(dataset_train,split==TRUE)
new_valid = subset(dataset_train,split == FALSE)
regressor <- lm(formula = dataset_train$SalePrice ~ .,data=dataset_train)
y_pred <- predict(regressor,newdata = new_valid)
fitmodel = data.frame(predict(regressor, newdata = dataset_test))
fitmodel
write.csv(fitmodel, "House_prices.csv", row.names = TRUE)
final = data.frame(Id = dataset_test$Id, SalePrice = fitmodel$predict.regressor..newdata...dataset_test.)
write.csv(final, "House_prices.csv", row.names = FALSE)
write.csv(final, "House_prices.csv", row.names = FALSE)
